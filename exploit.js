let isExploiting = false;

const exploitType = document.getElementById('exploitType');
const targetUrl = document.getElementById('targetUrl');
const startExploitBtn = document.getElementById('startExploitBtn');
const stopExploitBtn = document.getElementById('stopExploitBtn');
const exploitConsole = document.getElementById('exploitConsole');

function logExploit(message, type = 'info') {
  const step = document.createElement('div');
  step.className = `attack-step ${type}`;
  step.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
  exploitConsole.appendChild(step);
  exploitConsole.scrollTop = exploitConsole.scrollHeight;
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function sqlInjectionAttack(url) {
  logExploit('SQL Enjeksiyon saldırı dizisi başlatılıyor...', 'info');
  
  logExploit('Hedef ile bağlantı test ediliyor...', 'info');
  await sleep(1000);
  logExploit('Bağlantı başarıyla kuruldu', 'success');

  logExploit('Veritabanı türü ve sürümü tespit ediliyor...', 'info');
  await sleep(1500);
  logExploit('Veritabanı tespit edildi: MySQL 5.7.34', 'success');

  logExploit('Veritabanları listeleniyor...', 'info');
  await sleep(2000);
  const databases = ['information_schema', 'admin_db', 'users_db', 'products_db'];
  const table = document.createElement('table');
  table.className = 'data-table';
  table.innerHTML = `
    <tr><th>Mevcut Veritabanları</th></tr>
    ${databases.map(db => `<tr><td>${db}</td></tr>`).join('')}
  `;
  exploitConsole.appendChild(table);

  logExploit('Tablolar listeleniyor...', 'info');
  await sleep(1500);
  const tables = ['users', 'admins', 'permissions', 'logs'];
  const tablesTable = document.createElement('table');
  tablesTable.className = 'data-table';
  tablesTable.innerHTML = `
    <tr><th>Tables in users_db</th></tr>
    ${tables.map(table => `<tr><td>${table}</td></tr>`).join('')}
  `;
  exploitConsole.appendChild(tablesTable);

  logExploit('Sütunlar listeleniyor...', 'info');
  await sleep(1500);
  const columns = ['id', 'username', 'password', 'email', 'created_at'];
  const columnsTable = document.createElement('table');
  columnsTable.className = 'data-table';
  columnsTable.innerHTML = `
    <tr><th>Sütunlar</th></tr>
    ${columns.map(col => `<tr><td>${col}</td></tr>`).join('')}
  `;
  exploitConsole.appendChild(columnsTable);

  logExploit('Kullanıcı kimlik bilgileri çıkarılıyor...', 'info');
  await sleep(2000);
  const data = [
    ['admin', '5f4dcc3b5aa765d61d8327deb882cf99', 'admin@target.com'],
    ['moderator', '098f6bcd4621d373cade4e832627b4f6', 'mod@target.com'],
    ['user1', '24c9e15e52afc47c225b757e7bee1f9d', 'user1@target.com']
  ];
  const dataTable = document.createElement('table');
  dataTable.className = 'data-table';
  dataTable.innerHTML = `
    <tr><th>Kullanıcı Adı</th><th>Parola Hash</th><th>E-posta</th></tr>
    ${data.map(row => `<tr><td>${row[0]}</td><td>${row[1]}</td><td>${row[2]}</td></tr>`).join('')}
  `;
  exploitConsole.appendChild(dataTable);

  logExploit('Saldırı başarıyla tamamlandı', 'success');
}

async function xssAttack(url) {
  logExploit('XSS güvenlik açığı değerlendirmesi başlatılıyor...', 'info');
  
  logExploit('Hedef ile bağlantı test ediliyor...', 'info');
  await sleep(1000);
  logExploit('Bağlantı başarıyla kuruldu', 'success');

  logExploit('XSS bağlamı tespit ediliyor...', 'info');
  await sleep(1500);
  logExploit('Bağlam: HTML girdi alanı', 'success');

  logExploit('Girdi filtreleri test ediliyor...', 'info');
  await sleep(1500);
  const filters = [
    'Temel < > filtreleme',
    'Script etiketi filtreleme yok',
    'Olay işleyici filtreleme yok',
    'HTML kodlama yok'
  ];
  const filtersTable = document.createElement('table');
  filtersTable.className = 'data-table';
  filtersTable.innerHTML = `
    <tr><th>Tespit Edilen Filtreler</th></tr>
    ${filters.map(filter => `<tr><td>${filter}</td></tr>`).join('')}
  `;
  exploitConsole.appendChild(filtersTable);

  logExploit('XSS yükleri test ediliyor...', 'info');
  await sleep(2000);
  const payloads = [
    ['<script>alert(1)</script>', 'Engellendi'],
    ['<img src=x onerror=alert(1)>', 'Başarılı'],
    ['<svg onload=alert(1)>', 'Başarılı'],
    ['javascript:alert(1)', 'Engellendi']
  ];
  const payloadsTable = document.createElement('table');
  payloadsTable.className = 'data-table';
  payloadsTable.innerHTML = `
    <tr><th>Yük</th><th>Sonuç</th></tr>
    ${payloads.map(row => `<tr><td>${row[0]}</td><td>${row[1]}</td></tr>`).join('')}
  `;
  exploitConsole.appendChild(payloadsTable);

  logExploit('Çerez çalmaya yönelik yük testi...', 'info');
  await sleep(1500);
  logExploit('Çerez çalmaya yönelik yük başarılı', 'success');

  logExploit('DOM değiştirme testi...', 'info');
  await sleep(1500);
  logExploit('DOM değiştirme başarılı', 'warning');

  logExploit('Saldırı başarıyla tamamlandı', 'success');
}

async function rfiAttack(url) {
  logExploit('RFI saldırı dizisi başlatılıyor...', 'info');
  
  logExploit('Hedef ile bağlantı test ediliyor...', 'info');
  await sleep(1000);
  logExploit('Bağlantı başarıyla kuruldu', 'success');

  logExploit('Uzak dosya içe aktarma testleri yapılıyor...', 'info');
  await sleep(1500);
  
  const payloads = [
    ['http://evil.com/shell.php', 'Başarılı'],
    ['http://attacker.com/cmd.php', 'Başarılı'],
    ['ftp://malicious.com/backdoor.php', 'Engellendi'],
    ['https://hack.com/exploit.php', 'Başarılı']
  ];
  
  const payloadsTable = document.createElement('table');
  payloadsTable.className = 'data-table';
  payloadsTable.innerHTML = `
    <tr><th>Yük</th><th>Sonuç</th></tr>
    ${payloads.map(row => `<tr><td>${row[0]}</td><td>${row[1]}</td></tr>`).join('')}
  `;
  exploitConsole.appendChild(payloadsTable);

  logExploit('Uzak kod çalıştırma testi yapılıyor...', 'info');
  await sleep(1500);
  logExploit('Uzak kod çalıştırma başarılı!', 'warning');

  logExploit('Saldırı başarıyla tamamlandı', 'success');
}

async function lfiAttack(url) {
  logExploit('LFI saldırı dizisi başlatılıyor...', 'info');
  
  logExploit('Hedef ile bağlantı test ediliyor...', 'info');
  await sleep(1000);
  logExploit('Bağlantı başarıyla kuruldu', 'success');

  logExploit('Yerel dosya okuma testleri yapılıyor...', 'info');
  await sleep(1500);
  
  const payloads = [
    ['../../../etc/passwd', 'Başarılı'],
    ['../../../../etc/shadow', 'Engellendi'],
    ['../../../apache/logs/access.log', 'Başarılı'],
    ['../../win.ini', 'Başarılı'],
    ['%00../../etc/passwd', 'Başarılı']
  ];
  
  const payloadsTable = document.createElement('table');
  payloadsTable.className = 'data-table';
  payloadsTable.innerHTML = `
    <tr><th>Yük</th><th>Sonuç</th></tr>
    ${payloads.map(row => `<tr><td>${row[0]}</td><td>${row[1]}</td></tr>`).join('')}
  `;
  exploitConsole.appendChild(payloadsTable);

  logExploit('Günlük zehirlenme testi yapılıyor...', 'info');
  await sleep(1500);
  logExploit('Günlük zehirlenme başarılı!', 'warning');

  logExploit('Saldırı başarıyla tamamlandı', 'success');
}

startExploitBtn.addEventListener('click', async () => {
  if (!exploitType.value || !targetUrl.value) {
    logExploit('Lütfen saldırı türünü ve hedef URL\'yi girin', 'error');
    return;
  }

  exploitConsole.innerHTML = '';
  isExploiting = true;
  startExploitBtn.disabled = true;
  stopExploitBtn.disabled = false;

  try {
    switch(exploitType.value) {
      case 'sqli':
        await sqlInjectionAttack(targetUrl.value);
        break;
      case 'xss':
        await xssAttack(targetUrl.value);
        break;
      case 'rfi':
        await rfiAttack(targetUrl.value);
        break;
      case 'lfi':
        await lfiAttack(targetUrl.value);
        break;
    }
  } catch (error) {
    logExploit(`Saldırı başarısız: ${error.message}`, 'error');
  }

  isExploiting = false;
  startExploitBtn.disabled = false;
  stopExploitBtn.disabled = true;
});

stopExploitBtn.addEventListener('click', () => {
  isExploiting = false;
  stopExploitBtn.disabled = true;
  logExploit('Saldırı işlemi kullanıcı tarafından durduruldu', 'warning');
});

window.showPage = function(page) {
  document.getElementById('scanner-page').style.display = page === 'scanner' ? 'block' : 'none';
  document.getElementById('exploit-page').style.display = page === 'exploit' ? 'block' : 'none';
  document.getElementById('exploit-page').classList.toggle('visible', page === 'exploit');
  
  document.querySelectorAll('.nav-menu a').forEach(link => {
    link.classList.toggle('active', link.getAttribute('onclick').includes(page));
  });
};